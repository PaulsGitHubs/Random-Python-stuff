#Basic programming

#Degrees Fahrenheit ($T_F$) are converted to degrees Celsius ($T_c$) using the formula:
#T_c = 5(T_f - 32)/9

T_f = 78
T_c = 5*(T_f - 32)/9
print(T_C)

#mortgage affordabillity test tool
#1. Loan principal (amount borrowed)
#2. Official Bank Rate (percentage, expressed per annum)
#3. Rate over the official Bank Rate (percentage, expressed per annum)

principal = 150000
bankrate = 0.005
rateoverbankrate = 0.0149
monthly_payments = (principal * (bankrate/12)) + (principal* (rateoverbankrate/12))
print(monthly_payments)

#Compare the computed values of 
#d_0 = a \cdot b + a  \cdot  c
#d_1 = a \cdot (b + c)
#when $a = 100$, $b = 0.1$ and $c = 0.2$. Store $d_{0}$ in the variable `d0` and $d_{1}$ in the variable `d1`.

a = 100; b =0.1; c=0.2
d0 = (a*b) + (a*c)
d1 = a*(b+c)
print(d0 == d1)

#-------------------------------------------------------------------------------------------------------
#functions

def sum_and_increment(a, b):
    """"Return the sum of a and b, plus 1"""
    return a + b + 1
# Call the function
m = sum_and_increment(3, 4)
print(m)  # Expect 8
# Call the function
m = 10
n = sum_and_increment(m, m)
print(n)  # Expect 21


def print_message():
    print("The function 'print_message' has been called.")


def process_value(x):
    "Return a value that depends on the input value x "
    if x > 10:
        return 0
    elif x > 5:
        return x*x
    elif x > 0:
        return x**3
    else:
        return x
print("Case A: 3 values")    
for y in range(3):
    print(process_value(y))
print("Case B: 12 values")    
for y in range(12):
    print(process_value(y))
print_message()


def subtract_and_increment(a, b):
    "Return a minus b, plus 1"
    return a - b + 1
alpha, beta = 3, 5  # This is short hand notation for alpha = 3
                    #                                 beta = 5
# Call the function and print the return value
print(subtract_and_increment(alpha, beta))  # Expect -1
print(subtract_and_increment(beta, alpha))  # Expect 3


def f0(x):
    "Compute x^2 - 1"
    return x*x - 1


def f1(x):
    "Compute -x^2 + 2x + 1"
    return -x*x + 2*x + 1


def is_positive(f, x):
    "Check if the function value f(x) is positive"
    # Evaluate the function passed into the function for the value of x 
    # passed into the function
    if f(x) > 0:
        return True
    else:
        return False
# Value of x for which we want to test a function sign
x = 4.5
# Test function f0
print(is_positive(f0, x))
# Test function f1
print(is_positive(f1, x))

def position(t, r0, v0=0.0, a=-9.81):
    "Compute position of an accelerating particle."
    return r0 + v0*t + 0.5*a*t*t
# Position after 0.2 s (t) when dropped from a height of 1 m (r0) 
# with v0=0.0 and a=-9.81
p = position(0.2, 1.0)
print(p)
# Position after 0.2 s (t) when dropped from a height of  1 m (r0)
p = position(0.2, 1, 0.0, -9.78)
print(p)


def compute_max_min_mean(x0, x1, x2):
    "Return maximum, minimum and mean values"
    x_min = x0
    if x1 < x_min:
        x_min = x1
    if x2 < x_min:
        x_min = x
    x_max = x0
    if x1 > x_max:
        x_max = x1
    if x2 > x_max:
        x_max = x2
    x_mean = (x0 + x1 + x2)/3    
    return x_min, x_max, x_mean
xmin, xmax, xmean = compute_max_min_mean(0.5, 0.1, -20)
print(xmin, xmax, xmean)

#Recursion
def fib(n):
    "Compute the nth Fibonacci number"
    # Starting values for f0 and f1
    f0, f1 = 0, 1
    # Handle cases n==0 and n==1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    # Start loop (from n = 2)    
    for i in range(2, n + 1):
        # Compute next term in sequence
        f = f1 + f0
        # Update f0 and f1    
        f0 = f1
        f1 = f
    # Return Fibonacci number
    return f
print(fib(10))

def f(n): 
    "Compute the nth Fibonacci number using recursion"
    if n == 0:
        return 0  # This doesn't call f, so it breaks out of the recursion loop
    elif n == 1:
        return 1  # This doesn't call f, so it breaks out of the recursion loop
    else:
        return f(n - 1) + f(n - 2)  # This calls f for n-1 and n-2 (recursion), and returns the sum 
print(f(10))

#passing value by reference or object
def mult_by_two(a):
    a *= 2
    print("Value of variable \'a\' inside function:", a)
a = 5
mult_by_two(a)
a = [2, 3]
mult_by_two(a)
print("Value of variable \'a\' post-function:", a)
print("Value of variable \'a\' post-function:", a)

# Basic Data Structures ---------------------------------------------------------------------------------

#lists
lab_group0 = ["Sarah", "John", "Joe", "Emily", "Quang"]
print("Lab group members: {}".format(lab_group0))
print("Size of lab group: {}".format(len(lab_group0)))
print("Check the Python object type: {}".format(type(lab_group0)))
for member in lab_group0:
    print(member)
for n, member in enumerate(lab_group0):
    print(n, member)
    
#tuples, tuples cannot be changed after created.
room = ("Laura", 32)
print("Room allocation: {}".format(room))
print("Length of entry: {}".format(len(room)))
print(type(room))
# Iterate over tuple values
for d in room:
    print(d)
# Index into tuple values
print(room[1])
print(room[0])
room = ("Adrian",)
print("Room allocation: {}".format(room))
print("Length of entry: {}".format(len(room)))
print(type(room))
room_allocation = [("Adrian",), ("Laura", 32), ("John", 31), ("Penelope", 28), ("Fraser", 28), ("Gaurav", 19)]
print(room_allocation)
room_allocation.sort()
print(room_allocation)
for entry in room_allocation:
    if len(entry) > 1:
        print("Name: {} \n  Room: {}".format(entry[0], entry[1]))

#Dictionaries (maps)
room_allocation = {"Adrian": None, "Laura": 32, "John": 31, "Penelope": 28, "Fraser": 28, "Gaurav": 19}
print(room_allocation)
print(type(room_allocation))
frasers_room = room_allocation["Fraser"]
print(frasers_room)
frasers_room = room_allocation["Frasers"]
print("Fraser" in room_allocation)
print("Frasers" in room_allocation)
for d in room_allocation:
    print(d)
for name, room_number in room_allocation.items():
    print(name, room_number)
    
# Create empty dictionary
room_allocation_inverse = {}
# Build inverse dictionary to map 'room number' -> name 
for name, room_number in room_allocation.items():
    # Insert entry into dictionary
    room_allocation_inverse[room_number] = name
print(room_allocation_inverse)

rooms_to_check = [28, 29]
for room in rooms_to_check:
    if room in room_allocation_inverse:
        print("Room {} is occupied by {}.".format(room, room_allocation_inverse[room]))
    else:
        print("Room {} is unoccupied.".format(room))
